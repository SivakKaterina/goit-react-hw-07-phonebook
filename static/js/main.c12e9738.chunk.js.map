{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/Filter/filter.module.css","components/Section/section.module.css","components/ContactList/contactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Section/Section.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","number","nameInputId","shortid","generate","numberInputId","handleChange","e","setState","currentTarget","value","handleSubmit","props","onSubmit","preventDefault","some","alert","reset","className","C","form","this","htmlFor","input","id","onChange","type","pattern","title","required","button","Component","connect","dispatch","post","then","data","catch","error","addContact","onDeleteList","delete","deleteContact","map","onClick","contactsAction","target","F","label","Section","children","S","sectionContainer","App","fetchContact","formSubmitHandler","get","createReducer","_","payload","action","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c12e9738.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form__3vEts\",\"input\":\"contactForm_input__3Tn4i\",\"span\":\"contactForm_span__2He4Y\",\"button\":\"contactForm_button__2Ufna\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"filter_label__jhR6M\",\"input\":\"filter_input__1rgLi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionContainer\":\"section_sectionContainer__3avYe\",\"title\":\"section_title__1V-9l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"contactList_button__2oeDY\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n// export const changeContactRequest = createAction('contacts/changeContactRequest');\n// export const changeContactSuccess = createAction('contacts/changeContactSuccess');\n// export const changeContactError = createAction('contacts/changeContactError');\n\n// const addContact = createAction(\"contacts/add\", ({ name, number }) => {\n//   return {\n//     payload: {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     },\n//   };\n// });\n//  export const deleteContact = createAction(\"contacts/delete\");\n\n// export default {\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   deleteContact,\n//   changeFilter\n// };\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContact = () => dispatch => {\n  dispatch(fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\n    .catch(error => dispatch(fetchContactError(error)));\n};\n\nexport const addContact =\n  ({ name, number }) =>\n  dispatch => {\n    const contact = {\n      name,\n      number,\n    };\n\n    dispatch(addContactRequest());\n\n    axios\n      .post('/contacts', contact)\n      .then(({ data }) => dispatch(addContactSuccess(data)))\n      .catch(error => dispatch(addContactError(error)));\n  };\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getItems = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getItems(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return  contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// }\n\nexport const getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport C from './contactForm.module.css';\nimport shortid from 'shortid';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getItems } from '../../redux/contacts/contacts-selector';\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    const { contacts, onSubmit } = this.props;\n    const { name, number } = this.state;\n\n    e.preventDefault();\n    contacts.some(contact => contact.name === name)\n      ? alert(`This person ${name} is already in contacts`)\n      : contacts.some(contact => contact.number === number)\n      ? alert(`This number ${number} is already in contacts`)\n      : onSubmit(this.state);\n    // this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={C.form} onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>Name</label>\n        <input\n          className={C.input}\n          id={this.nameInputId}\n          value={this.state.name}\n          onChange={this.handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов.             Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label htmlFor={this.numberInputId}>Number</label>\n        <input\n          className={C.input}\n          id={this.numberInputId}\n          value={this.state.number}\n          onChange={this.handleChange}\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d            {1,9}\"\n          // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире,             круглые скобки и может начинаться с +\"\n          required\n        />\n        <button className={C.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport C from './contactList.module.css';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selector';\n\nconst ContactList = ({ contacts, onDeleteList }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id}>\n        <span>{name}</span>\n        <span>{number}</span>\n        <button className={C.button} onClick={() => onDeleteList(id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteList: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport F from './filter.module.css';\nimport { connect } from 'react-redux';\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selector';\n\nconst Filter = ({ filter, onChange }) => (\n  <label className={F.label}>\n    Find contacts by name\n    <input\n      className={F.input}\n      type=\"text\"\n      value={filter}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport S from './section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={S.sectionContainer}>\n    <h2 className={S.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nexport default Section;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Section from './components/Section';\nimport { fetchContact } from './redux/contacts/contacts-operations';\n// import { getLoading } from './redux/contacts/contacts-selector';\n// import contacts from './data/contacts.json'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContact();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Section title={'Phonebook'}>\n          <ContactForm onSubmit={this.formSubmitHandler} />\n        </Section>\n\n        <Section title={'Contacts'}>\n          <Filter />\n          <ContactList />\n        </Section>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = state => ({\n//   isLoadingContacts: getLoading(state),\n// });\n\nconst mapDispachToProps = dispatch => ({\n  fetchContact: () => dispatch(fetchContact()),\n});\nexport default connect(null, mapDispachToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({ items, filter, loading });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist : ['filter'],\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// import { PersistGate } from 'redux-persist/integration/react';\n// import { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}